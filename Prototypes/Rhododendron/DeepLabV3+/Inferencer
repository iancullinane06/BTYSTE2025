import os
import numpy as np
import tensorflow as tf
from keras.models import load_model
import tifffile as tiff
import matplotlib.pyplot as plt
import random
import tensorflow as tf
from dotenv import load_dotenv
from keras import backend as K

# Load environment variables
load_dotenv()

# Define parameters
IMG_HEIGHT = 244
IMG_WIDTH = 244
IMG_CHANNELS = 6
MODEL_PATH = os.getenv('RHODODENDRON-DEEPLAB-MODEL')  # Path to the saved model
IMAGE_DIR = os.getenv('RHODODENDRON-SAMPLES')  # Directory containing all images
MASK_DIR = os.getenv('RHODODENDRON-SAMPLES-MASKS')  # Directory containing all masks

def dice_coefficient(y_true, y_pred, smooth=1):
    """
    Dice Coefficient for binary segmentation.
    """
    y_true_f = tf.keras.backend.flatten(y_true)
    y_pred_f = tf.keras.backend.flatten(y_pred)
    intersection = tf.keras.backend.sum(y_true_f * y_pred_f)
    return (2. * intersection + smooth) / (tf.keras.backend.sum(y_true_f) + tf.keras.backend.sum(y_pred_f) + smooth)

def dice_loss(y_true, y_pred):
    """
    Dice loss function, which is 1 - Dice Coefficient.
    """
    return 1 - dice_coefficient(y_true, y_pred)

def combined_loss(y_true, y_pred):
    """
    Combined loss: Dice loss + Binary Cross-Entropy
    """
    return dice_loss(y_true, y_pred) + tf.keras.losses.binary_crossentropy(y_true, y_pred)

# Accuracy metric for final testing
def f2_score(y_true, y_pred, beta=2):
    y_true_f = tf.keras.backend.flatten(y_true)
    y_pred_f = tf.keras.backend.flatten(y_pred)
    true_positive = tf.keras.backend.sum(y_true_f * y_pred_f)
    precision = true_positive / (tf.keras.backend.sum(y_pred_f) + tf.keras.backend.epsilon())
    recall = true_positive / (tf.keras.backend.sum(y_true_f) + tf.keras.backend.epsilon())
    f2 = (1 + beta**2) * (precision * recall) / (beta**2 * precision + recall + tf.keras.backend.epsilon())
    return f2

def pixel_accuracy(y_true, y_pred):
    """
    Pixel Accuracy metric.
    """
    y_true_f = tf.keras.backend.flatten(y_true)
    y_pred_f = tf.keras.backend.flatten(y_pred)

    # Compare predictions and true values
    correct_predictions = tf.keras.backend.sum(tf.keras.backend.cast(tf.keras.backend.equal(y_true_f, tf.keras.backend.round(y_pred_f)), dtype='float32'))
    
    # Divide by the total number of pixels
    total_pixels = tf.keras.backend.sum(tf.keras.backend.ones_like(y_true_f))
    return correct_predictions / total_pixels


def mean_iou(y_true, y_pred, num_classes=2):
    y_pred = tf.keras.backend.round(y_pred)
    iou_scores = []
    for i in range(num_classes):
        intersection = tf.keras.backend.sum(tf.keras.backend.cast(y_true == i, tf.float32) * tf.keras.backend.cast(y_pred == i, tf.float32))
        union = tf.keras.backend.sum(tf.keras.backend.cast(y_true == i, tf.float32) + tf.keras.backend.cast(y_pred == i, tf.float32)) - intersection
        iou = (intersection + 1e-7) / (union + 1e-7)
        iou_scores.append(iou)
    return tf.keras.backend.mean(tf.keras.backend.stack(iou_scores))

model = load_model(MODEL_PATH, custom_objects={'combined_loss': combined_loss, 'dice_coefficient': dice_coefficient, 'f2_score': f2_score, 'pixel_accuracy': pixel_accuracy, 'mean_iou': mean_iou})

def preprocess_image(image_path, img_height, img_width):
    """
    Preprocesses the image for inference.
    """
    img = tiff.imread(image_path)
    
    # Ensure the image has the right number of channels
    if img.ndim == 2:  # If grayscale
        img = np.stack([img] * IMG_CHANNELS, axis=-1)  # Convert to 6-channel image
    
    img = tf.image.resize(img, (img_height, img_width))
    img = img / 255.0  # Normalize
    return np.expand_dims(img, axis=0)  # Add batch dimension

def run_inference(model, image_path):
    """
    Runs inference on a single image.
    """
    img = preprocess_image(image_path, IMG_HEIGHT, IMG_WIDTH)
    prediction = model.predict(img)
    return prediction[0]

def visualize_results(original_image_path, mask_path, prediction):
    """
    Visualizes the original image channels, the mask, and the predicted mask.
    """
    img = tiff.imread(original_image_path)
    mask = tiff.imread(mask_path)
    
    # Handle multi-channel images
    if img.ndim == 2:  # If grayscale
        img = np.stack([img] * IMG_CHANNELS, axis=-1)  # Convert to 6-channel image
    
    # Ensure mask has a channel dimension
    if mask.ndim == 2:
        mask = np.expand_dims(mask, axis=-1)  # Convert to (H, W, 1)
    
    # Resize image and mask
    img_resized = tf.image.resize(img, (IMG_HEIGHT, IMG_WIDTH)).numpy()
    mask_resized = tf.image.resize(mask, (IMG_HEIGHT, IMG_WIDTH)).numpy()
    
    num_channels = IMG_CHANNELS
    num_cols = 3
    num_rows = (num_channels + 1 + num_cols - 1) // num_cols  # Add 1 for the mask and 1 for the predicted mask
    
    plt.figure(figsize=(20, 5 * num_rows))  # Adjust the figsize as needed
    
    # Display each channel of the original image
    for i in range(num_channels):
        plt.subplot(num_rows, num_cols, i + 1)
        plt.imshow(img_resized[:, :, i], cmap='gray')
        plt.title(f'Original Channel {i+1}')
        plt.axis('off')
    
    # Display the original mask
    plt.subplot(num_rows, num_cols, num_channels + 1)
    plt.imshow(mask_resized[:, :, 0], cmap='gray')
    plt.title('Original Mask')
    plt.axis('off')
    
    # Display the predicted mask
    plt.subplot(num_rows, num_cols, num_channels + 2)
    plt.imshow(prediction.squeeze(), cmap='gray')
    plt.title('Predicted Mask')
    plt.axis('off')
    
    plt.show()

# Select a random image from the directory
if IMAGE_DIR and MASK_DIR:
    image_files = [f for f in os.listdir(IMAGE_DIR) if f.endswith('.tif')]
    if not image_files:
        print("No TIFF images found in the specified directory.")
    else:
        random_image = random.choice(image_files)
        image_path = os.path.join(IMAGE_DIR, random_image)
        mask_path = os.path.join(MASK_DIR, random_image)  # Assuming masks have the same name
        
        prediction = run_inference(model, image_path)
        visualize_results(image_path, mask_path, prediction)
else:
    print("Environment variables 'RHODODENDRON-SAMPLES' or 'RHODODENDRON-SAMPLES-MASKS' not set.")
